// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// MockDBClient is an autogenerated mock type for the SomeDBClient type
type MockDBClient struct {
	mock.Mock
}

type MockDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBClient) EXPECT() *MockDBClient_Expecter {
	return &MockDBClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields:
func (_m *MockDBClient) Create() (json.RawMessage, error) {
	ret := _m.Called()

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (json.RawMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() json.RawMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDBClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDBClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *MockDBClient_Expecter) Create() *MockDBClient_Create_Call {
	return &MockDBClient_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *MockDBClient_Create_Call) Run(run func()) *MockDBClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBClient_Create_Call) Return(_a0 json.RawMessage, _a1 error) *MockDBClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClient_Create_Call) RunAndReturn(run func() (json.RawMessage, error)) *MockDBClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields:
func (_m *MockDBClient) Delete() (json.RawMessage, error) {
	ret := _m.Called()

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (json.RawMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() json.RawMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDBClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDBClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *MockDBClient_Expecter) Delete() *MockDBClient_Delete_Call {
	return &MockDBClient_Delete_Call{Call: _e.mock.On("Delete")}
}

func (_c *MockDBClient_Delete_Call) Run(run func()) *MockDBClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBClient_Delete_Call) Return(_a0 json.RawMessage, _a1 error) *MockDBClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClient_Delete_Call) RunAndReturn(run func() (json.RawMessage, error)) *MockDBClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *MockDBClient) Read() (json.RawMessage, error) {
	ret := _m.Called()

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (json.RawMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() json.RawMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDBClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockDBClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MockDBClient_Expecter) Read() *MockDBClient_Read_Call {
	return &MockDBClient_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MockDBClient_Read_Call) Run(run func()) *MockDBClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBClient_Read_Call) Return(_a0 json.RawMessage, _a1 error) *MockDBClient_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClient_Read_Call) RunAndReturn(run func() (json.RawMessage, error)) *MockDBClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields:
func (_m *MockDBClient) Update() (json.RawMessage, error) {
	ret := _m.Called()

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (json.RawMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() json.RawMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDBClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDBClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
func (_e *MockDBClient_Expecter) Update() *MockDBClient_Update_Call {
	return &MockDBClient_Update_Call{Call: _e.mock.On("Update")}
}

func (_c *MockDBClient_Update_Call) Run(run func()) *MockDBClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBClient_Update_Call) Return(_a0 json.RawMessage, _a1 error) *MockDBClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClient_Update_Call) RunAndReturn(run func() (json.RawMessage, error)) *MockDBClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBClient creates a new instance of MockDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBClient {
	mock := &MockDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
